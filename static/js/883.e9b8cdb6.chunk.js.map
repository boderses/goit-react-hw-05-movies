{"version":3,"file":"static/js/883.e9b8cdb6.chunk.js","mappings":"sSAEMA,E,MAASC,GAAAA,OAAa,CAC1BC,QAAS,iCAGEC,EAAiB,mCAAG,6GAENH,EAAOI,IAC5B,gEAH2B,cAEvBC,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,yDAOtBC,QAAQC,OAAR,OAPsB,yDAAH,qDAWjBC,EAAiB,mCAAG,WAAMC,GAAN,gGAENX,EAAOI,IAAP,8BACEO,EADF,wFAFM,cAEvBN,EAFuB,yBAKtBA,EAASC,KAAKC,SALQ,yDAOtBC,QAAQC,OAAR,OAPsB,yDAAH,sDAWjBG,EAAe,mCAAG,WAAMC,GAAN,gGAEJb,EAAOI,IAAP,iBACXS,EADW,6DAFI,cAErBR,EAFqB,yBAKpBA,EAASC,MALW,yDAOpBE,QAAQC,OAAR,OAPoB,yDAAH,sDAWfK,EAAY,mCAAG,WAAMD,GAAN,gGAEDb,EAAOI,IAAP,iBACXS,EADW,qEAFC,cAElBR,EAFkB,yBAKjBA,EAASC,KAAKS,MALG,yDAOjBP,QAAQC,OAAR,OAPiB,yDAAH,sDAWZO,EAAe,mCAAG,WAAMH,GAAN,gGAEJb,EAAOI,IAAP,iBACXS,EADW,4EAFI,cAErBR,EAFqB,yBAKpBA,EAASC,KAAKC,SALM,yDAOpBC,QAAQC,OAAR,OAPoB,yDAAH,qD,6HCvCb,SAASQ,IAAgB,IAAD,YACrC,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACQP,GAAYQ,EAAAA,EAAAA,MAAZR,QACFS,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,YACRZ,EAAAA,EAAAA,IAAgBC,GAASY,KAAKL,EAC/B,GAAE,CAACP,IAEJ,IAAsBa,EAEtB,OACE,iCACE,SAAC,KAAD,CAAMC,GAAE,iBAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,qBACCV,IACC,gCACGA,EAAMW,cACL,gBACEC,IAAG,8CAAyCZ,EAAMW,aAClDE,IAAKb,EAAMc,QAIdd,EAAMc,OAASd,EAAMe,eACpB,0BACGf,EAAMc,MADT,KACkBd,EAAMe,aAAaC,MAAM,EAAG,GAD9C,QAKF,wCAAqC,GAArBhB,EAAMiB,aAAtB,QACA,sCACA,uBAAIjB,EAAMkB,YACV,mCACClB,EAAMO,SAAU,wBAxBHA,EAwBqBP,EAAMO,OAxBjBA,EAAOY,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UA0B7D,4BACE,mDACA,SAAC,KAAD,CAASd,GAAG,OAAOC,MAAO,CAAEC,KAAI,iBAAEP,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAA3D,UACE,mCAEF,SAAC,KAAD,CACEF,GAAG,UACHC,MAAO,CAAEC,KAAI,iBAAEP,QAAF,IAAEA,GAAF,UAAEA,EAAUM,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAF1C,UAIE,4CAMR,SAAC,KAAD,MAGL,C","sources":["api/movies.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst client = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await client.get(\n      '/trending/movie/day?api_key=29ae5d4d8930c615329fddbb049af986'\n    );\n    return response.data.results;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getMoviesBySearch = async query => {\n  try {\n    const response = await client.get(\n      `/search/movie?query=${query}&api_key=29ae5d4d8930c615329fddbb049af986&language=en-US&page=1&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const response = await client.get(\n      `/movie/${movieId}?api_key=29ae5d4d8930c615329fddbb049af986&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await client.get(\n      `/movie/${movieId}/credits?api_key=29ae5d4d8930c615329fddbb049af986&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await client.get(\n      `/movie/${movieId}/reviews?api_key=29ae5d4d8930c615329fddbb049af986&language=en-US&page=1`\n    );\n    return response.data.results;\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport {\n  Link,\n  NavLink,\n  useParams,\n  useLocation,\n  Outlet,\n} from 'react-router-dom';\n\nimport { getMovieDetails } from '../../api/movies';\n\nexport default function MovieDetails() {\n  const [movie, setMovie] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(setMovie);\n  }, [movieId]);\n\n  const getGenreNames = genres => genres.map(genre => genre.name).join(', ');\n\n  return (\n    <>\n      <Link to={location?.state?.from ?? '/'}>Go back</Link>\n      {movie && (\n        <>\n          {movie.poster_path && (\n            <img\n              src={`https://www.themoviedb.org/t/p/w500/${movie.poster_path}`}\n              alt={movie.title}\n            />\n          )}\n\n          {movie.title && movie.release_date && (\n            <h1>\n              {movie.title} ({movie.release_date.slice(0, 4)})\n            </h1>\n          )}\n\n          <p>User score: {movie.vote_average * 10}%</p>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n          <h2>Genres</h2>\n          {movie.genres && <p>{getGenreNames(movie.genres)}</p>}\n\n          <div>\n            <p>Additional information</p>\n            <NavLink to=\"cast\" state={{ from: location?.state?.from ?? '/' }}>\n              <p>Cast</p>\n            </NavLink>\n            <NavLink\n              to=\"reviews\"\n              state={{ from: location?.state?.from ?? '/' }}\n            >\n              <p>Reviews</p>\n            </NavLink>\n          </div>\n        </>\n      )}\n\n      <Outlet />\n    </>\n  );\n}\n"],"names":["client","axios","baseURL","getTrendingMovies","get","response","data","results","Promise","reject","getMoviesBySearch","query","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","MovieDetails","useState","movie","setMovie","useParams","location","useLocation","useEffect","then","genres","to","state","from","poster_path","src","alt","title","release_date","slice","vote_average","overview","map","genre","name","join"],"sourceRoot":""}